trigger:
  # Trigger from semantic version tags (for releasing to prod)
  tags:
    include:
    - '*.*.*'

  branches:
    include:
    - main

pool:
  vmImage: 'ubuntu-latest'

resources:
  repositories:
    # Where our templates are sourced from
    - repository: templates
      type: github
      ref: refs/heads/set-docker-tag-to-variable
      name: statisticsnorway/azure-pipelines-templates
      endpoint: github

variables:
  - name: repoName
    value: 'prod-bip/ssb/stratus/bip-initializer'

  - name: imageHost
    value: 'eu.gcr.io'

stages:

- stage: unitTests
  displayName: Run Unit Tests
  jobs:
  - job: unitTests
    displayName: Run Unit Tests
    # Inspired by https://github.com/statisticsnorway/microdata-datastore-builder/blob/master/azure-pipelines.yml

    steps:
      - task: UsePythonVersion@0
        inputs:
          versionSpec: '3.9'
        displayName: 'Use Python 3.9'

      - script: |
          export PIP_NO_CACHE_DIR=off \
            PIP_DISABLE_PIP_VERSION_CHECK=on \
            PIP_DEFAULT_TIMEOUT=100 \
            POETRY_VERSION=1.1.4 \
            POETRY_VIRTUALENVS_IN_PROJECT=true \
            POETRY_NO_INTERACTION=1
        displayName: 'Export environment variables'

      - script: |
          sudo apt-get install -y \
            curl \
            build-essential \
            python3-distutils \
            python3-apt \
            libpython3.9-dev
          curl -sSL https://raw.githubusercontent.com/sdispater/poetry/master/get-poetry.py | python -
          source $HOME/.poetry/env
          poetry install
        displayName: 'Install dependencies'

      - script: |
          poetry run pytest tests --ignore=tests/resources --junitxml=junit/test-results.xml --cov=. --cov-report=xml --cov-report=html
        displayName: 'Test with pytest'

      - task: PublishTestResults@2
        condition: succeededOrFailed()
        inputs:
          testResultsFiles: '**/test-*.xml'
          testRunTitle: 'Publish test results'

      - task: PublishCodeCoverageResults@1
        inputs:
          codeCoverageTool: Cobertura
          summaryFileLocation: '$(System.DefaultWorkingDirectory)/**/coverage.xml'
          reportDirectory: '$(System.DefaultWorkingDirectory)/**/htmlcov'

- stage: build
  displayName: Build Docker Image and push to GCR
  dependsOn: unitTests
  condition: succeeded()
  jobs:
  - job: build
    steps:
      # The template defines steps so we use it in a steps section
      - template: docker/docker-build-image-and-push-to-gcr.yml@templates
        parameters:
          imageName: '$(imageHost)/$(repoName)'
          repoName: $(repoName)

- stage: tagForProd
  displayName: Tag Docker Image for production
  dependsOn: build
  jobs:
  - template: docker/docker-tag-for-production.yml@templates
    parameters:
      tagToTag: '$(Build.SourceBranchName)-$(Build.SourceVersion)'
      gcrImageName: '$(imageHost)/$(repoName)'
